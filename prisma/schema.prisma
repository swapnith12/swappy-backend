// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String?  // Optional for OAuth users
  emailVerified Boolean  @default(false) // Tracks if email is verified
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())

   roomsCreated  Room[]   @relation("RoomCreator")
  roomsJoined   Player[] // Keeps track of rooms the user has joined

  Room Room[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  provider          String   // e.g., "google", "github"
  providerAccountId String   // Unique ID from the provider
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt @default(now())
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   // Email or other unique identifier
  token      String   @unique // Verification token
  expires    DateTime // Expiration time for the token
  createdAt  DateTime @default(now())
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique // Unique code to join room
  createdById String   @db.ObjectId
  createdBy   User     @relation("RoomCreator", fields: [createdById], references: [id])
  players     Player[]
  hostId      String?  @db.ObjectId // The user currently drawing
  host        User?    @relation(fields: [hostId], references: [id])
  maxPlayers  Int      @default(4) // Default max players
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  Score Score[]
}

model Player {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  roomId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  score     Int      @default(0) // Score in the game
  isHost    Boolean  @default(false) // Determines if this player is drawing
  createdAt DateTime @default(now())

  Score Score[]
}

model Score {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId  String   @db.ObjectId
  player    Player   @relation(fields: [playerId], references: [id])
  roomId    String   @db.ObjectId
  room      Room     @relation(fields: [roomId], references: [id])
  points    Int      @default(0) // Score points
  createdAt DateTime @default(now())
}